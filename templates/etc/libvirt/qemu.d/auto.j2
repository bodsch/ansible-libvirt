
{% if libvirt_qemu.auto is defined and
      libvirt_qemu.auto | count > 0 %}
  {% if libvirt_qemu.auto.dump_path is defined and
        libvirt_qemu.auto.dump_path | string | length > 0 %}
auto_dump_path                = "{{ libvirt_qemu.auto.dump_path }}"
  {% endif %}
  {% if libvirt_qemu.auto.dump_bypass_cache is defined and
        libvirt_qemu.auto.dump_bypass_cache | string | length > 0 %}
auto_dump_bypass_cache        = {{ libvirt_qemu.auto.dump_bypass_cache | bool | ternary('1', '0') }}
  {% endif %}
  {% if libvirt_qemu.auto.start_bypass_cache is defined and
        libvirt_qemu.auto.start_bypass_cache | string | length > 0 %}
auto_start_bypass_cache       = {{ libvirt_qemu.auto.start_bypass_cache | bool | ternary('1', '0') }}
  {% endif %}
{% endif %}
{#
# When a domain is configured to be auto-dumped when libvirtd receives a
# watchdog event from qemu guest, libvirtd will save dump files in directory
# specified by auto_dump_path. Default value is /var/lib/libvirt/qemu/dump
#
#auto_dump_path = "/var/lib/libvirt/qemu/dump"

# When a domain is configured to be auto-dumped, enabling this flag
# has the same effect as using the VIR_DUMP_BYPASS_CACHE flag with the
# virDomainCoreDump API.  That is, the system will avoid using the
# file system cache while writing the dump file, but may cause
# slower operation.
#
#auto_dump_bypass_cache = 0

# When a domain is configured to be auto-started, enabling this flag
# has the same effect as using the VIR_DOMAIN_START_BYPASS_CACHE flag
# with the virDomainCreateWithFlags API.  That is, the system will
# avoid using the file system cache when restoring any managed state
# file, but may cause slower operation.
#
#auto_start_bypass_cache = 0
#}
