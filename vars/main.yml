---

libvirt_dependecies: []

libvirt_packages:
  - libvirt

libvirt_service:
  name: libvirtd

libvirt_sysconf_directory: "/etc/default"

libvirt_defaults_libvirtd:
  # - network
  enable_tls: false
  enable_tcp: false
  tls_port: 16514
  tcp_port: 16509
  listen_addr: "127.0.0.1"        # 192.168.0.1
  enable_mdns: false
  # - socket
  unix_sock_group: "libvirt"      # libvirt
  unix_sock_ro_perms: ""          # 0777
  unix_sock_rw_perms: ""          # 0770
  unix_sock_admin_perms: ""       # 0770
  unix_sock_dir: "/run/libvirt"   # /run/libvirt
  # - authentication
  #  - none
  #  - sasl
  #  - polkit
  auth_unix_ro: ""                # polkit
  auth_unix_rw: ""                # polkit
  # auth_tcp = "sasl"
  # auth_tls = "none"
  # tcp_min_ssf = 112
  # access_drivers = [ "polkit" ]
  ## - TLS x509 certificate configuration
  # key_file = "/etc/pki/libvirt/private/serverkey.pem"
  # cert_file = "/etc/pki/libvirt/servercert.pem"
  # ca_file = "/etc/pki/CA/cacert.pem"
  # crl_file = "/etc/pki/CA/crl.pem"
  ## - Authorization controls
  # tls_no_sanity_certificate = 1
  # tls_no_verify_certificate = 1
  # tls_allowed_dn_list = ["DN1", "DN2"]
  # tls_priority="NORMAL"
  # sasl_allowed_username_list = ["joe@EXAMPLE.COM", "fred@EXAMPLE.COM" ]
  ## - Processing controls
  max_clients: 5000              # 5000
  max_queued_clients: 1000       # 1000
  max_anonymous_clients: 20      # 20
  min_workers: 5                 # 5
  max_workers: 20                # 20
  prio_workers: 5                # 5
  max_requests: ""               # ?
  max_client_requests: 5         # 5
  admin_min_workers: 1           # 1
  admin_max_workers: 5           # 5
  admin_max_clients: 5           # 5
  admin_max_queued_clients: 5    # 5
  admin_max_client_requests: 5   # 5
  # - Logging controls
  #    1: DEBUG
  #    2: INFO
  #    3: WARNING
  #    4: ERROR
  log_level: 3
  log_filters:
    - 3:remote
    - 4:event
    - 3:util.json
    - 3:util.object
    - 3:util.dbus
    - 3:util.netlink
    - 3:node_device
    - 3:rpc
    - 3:access
    - 1:*
  # ="1:qemu 1:libvirt 4:object 4:json 4:event 1:util"
  # Logging outputs:
  # An output is one of the places to save logging information
  # The format for an output can be:
  #    level:stderr
  #      output goes to stderr
  #    level:syslog:name
  #      use syslog for the output and use the given name as the ident
  #    level:file:file_path
  #      output to a file, with the given filepath
  #    level:journald
  #      output to journald logging system
  # In all cases 'level' is the minimal priority, acting as a filter
  #    1: DEBUG
  #    2: INFO
  #    3: WARNING
  #    4: ERROR
  log_outputs:
    - 2:file:/var/log/libvirt/libvirtd.log
    - 3:journald

  # - auditing                    #
  #   audit_level == 0  -> disable all auditing
  #   audit_level == 1  -> enable auditing, only if enabled on host (default)
  #   audit_level == 2  -> enable auditing, and exit if disabled on host
  #
  audit_level: 1
  #
  # If set to 1, then audit messages will also be sent
  # via libvirt logging infrastructure. Defaults to 0
  #
  audit_logging: false
  # - UUID of the host
  #host_uuid = "00000000-0000-0000-0000-000000000000"
  #host_uuid_source = "smbios"
  # - Keepalive protocol          #
  keepalive_interval: ""          # 5
  keepalive_count: ""             # 5
  admin_keepalive_interval: ""    # 5
  admin_keepalive_count: ""       # 5
  # - Open vSwitch
  ovs_timeout: ""                 # 5


libvirt_defaults_qemu:
  default: {}
    # Use of TLS requires that x509 certificates be issued. The default is
    # to keep them in /etc/pki/qemu. This directory must contain
    #
    #  ca-cert.pem - the CA master certificate
    #  server-cert.pem - the server certificate signed with ca-cert.pem
    #  server-key.pem  - the server private key
    #
    # and optionally may contain
    #
    #  dh-params.pem - the DH params configuration file
    #
    # If the directory does not exist, libvirtd will fail to start. If the
    # directory doesn't contain the necessary files, QEMU domains will fail
    # to start if they are configured to use TLS.
    #
    # In order to overwrite the default path alter the following. This path
    # definition will be used as the default path for other *_tls_x509_cert_dir
    # configuration settings if their default path does not exist or is not
    # specifically set.
    #
    # tls_x509_cert_dir = "/etc/pki/qemu"


    # The default TLS configuration only uses certificates for the server
    # allowing the client to verify the server's identity and establish
    # an encrypted channel.
    #
    # It is possible to use x509 certificates for authentication too, by
    # issuing an x509 certificate to every client who needs to connect.
    #
    # Enabling this option will reject any client who does not have a
    # certificate signed by the CA in /etc/pki/qemu/ca-cert.pem
    #
    # The default_tls_x509_cert_dir directory must also contain
    #
    #  client-cert.pem - the client certificate signed with the ca-cert.pem
    #  client-key.pem - the client private key
    #
    # If this option is supplied it provides the default for the "_verify" option
    # of specific TLS users such as vnc, backups, migration, etc. The specific
    # users of TLS may override this by setting the specific "_verify" option.
    #
    # When not supplied the specific TLS users provide their own defaults.
    #
    # tls_x509_verify = 1

    #
    # Libvirt assumes the server-key.pem file is unencrypted by default.
    # To use an encrypted server-key.pem file, the password to decrypt
    # the PEM file is required. This can be provided by creating a secret
    # object in libvirt and then to uncomment this setting to set the UUID
    # of the secret.
    #
    # NB This default all-zeros UUID will not work. Replace it with the
    # output from the UUID for the TLS secret from a 'virsh secret-list'
    # command and then uncomment the entry
    #
    # tls_x509_secret_uuid = "00000000-0000-0000-0000-000000000000"

  vnc:
    # VNC is configured to listen on 127.0.0.1 by default.
    # To make it listen on all public interfaces, uncomment
    # this next option.
    #
    # NB, strong recommendation to enable TLS + x509 certificate
    # verification when allowing public access
    #
    listen: "127.0.0.1"

    # Enable this option to have VNC served over an automatically created
    # unix socket. This prevents unprivileged access from users on the
    # host machine, though most VNC clients do not support it.
    #
    # This will only be enabled for VNC configurations that have listen
    # type=address but without any address specified. This setting takes
    # preference over vnc_listen.
    #
    auto_unix_socket: true

    # Enable use of TLS encryption on the VNC server. This requires
    # a VNC client which supports the VeNCrypt protocol extension.
    # Examples include vinagre, virt-viewer, virt-manager and vencrypt
    # itself. UltraVNC, RealVNC, TightVNC do not support this
    #
    # It is necessary to setup CA and issue a server certificate
    # before enabling this.
    #
    tls: false

    # In order to override the default TLS certificate location for
    # vnc certificates, supply a valid path to the certificate directory.
    # If the provided path does not exist, libvirtd will fail to start.
    # If the path is not provided, but vnc_tls = 1, then the
    # default_tls_x509_cert_dir path will be used.
    #
    # tls_x509_cert_dir: "/etc/pki/libvirt-vnc"

    # Uncomment and use the following option to override the default secret
    # UUID provided in the default_tls_x509_secret_uuid parameter.
    #
    # tls_x509_secret_uuid: "00000000-0000-0000-0000-000000000000"


    # The default TLS configuration only uses certificates for the server
    # allowing the client to verify the server's identity and establish
    # an encrypted channel.
    #
    # It is possible to use x509 certificates for authentication too, by
    # issuing an x509 certificate to every client who needs to connect.
    #
    # Enabling this option will reject any client that does not have a
    # certificate (as described in default_tls_x509_verify) signed by the
    # CA in the vnc_tls_x509_cert_dir (or default_tls_x509_cert_dir).
    #
    # If this option is not supplied, it will be set to the value of
    # "default_tls_x509_verify". If "default_tls_x509_verify" is not supplied either,
    # the default is "0".
    #
    # tls_x509_verify: true

    # The default VNC password. Only 8 bytes are significant for
    # VNC passwords. This parameter is only used if the per-domain
    # XML config does not already provide a password. To allow
    # access without passwords, leave this commented out. An empty
    # string will still enable passwords, but be rejected by QEMU,
    # effectively preventing any use of VNC. Obviously change this
    # example here before you set this.
    #
    # password: "XYZ12345"

    # Enable use of SASL encryption on the VNC server. This requires
    # a VNC client which supports the SASL protocol extension.
    # Examples include vinagre, virt-viewer and virt-manager
    # itself. UltraVNC, RealVNC, TightVNC do not support this
    #
    # It is necessary to configure /etc/sasl2/qemu.conf to choose
    # the desired SASL plugin (eg, GSSPI for Kerberos)
    #
    # sasl: true

    # The default SASL configuration file is located in /etc/sasl2/
    # When running libvirtd unprivileged, it may be desirable to
    # override the configs in this location. Set this parameter to
    # point to the directory, and create a qemu.conf in that location
    #
    # sasl_dir: "/some/directory/sasl2"

    # QEMU implements an extension for providing audio over a VNC connection,
    # though if your VNC client does not support it, your only chance for getting
    # sound output is through regular audio backends. By default, libvirt will
    # disable all QEMU sound backends if using VNC, since they can cause
    # permissions issues. Enabling this option will make libvirtd honor the
    # QEMU_AUDIO_DRV environment variable when using VNC.
    #
    # allow_host_audio: false
  spice:
    # Enable use of TLS encryption on the SPICE server.
    #
    # It is necessary to setup CA and issue a server certificate
    # before enabling this.
    #
    tls = false


    # In order to override the default TLS certificate location for
    # spice certificates, supply a valid path to the certificate directory.
    # If the provided path does not exist, libvirtd will fail to start.
    # If the path is not provided, but spice_tls = 1, then the
    # default_tls_x509_cert_dir path will be used.
    #
    # tls_x509_cert_dir = "/etc/pki/libvirt-spice"


    # Enable this option to have SPICE served over an automatically created
    # unix socket. This prevents unprivileged access from users on the
    # host machine.
    #
    # This will only be enabled for SPICE configurations that have listen
    # type=address but without any address specified. This setting takes
    # preference over spice_listen.
    #
    # auto_unix_socket = 1


    # The default SPICE password. This parameter is only used if the
    # per-domain XML config does not already provide a password. To
    # allow access without passwords, leave this commented out. An
    # empty string will still enable passwords, but be rejected by
    # QEMU, effectively preventing any use of SPICE. Obviously change
    # this example here before you set this.
    #
    # password = "XYZ12345"


    # Enable use of SASL encryption on the SPICE server. This requires
    # a SPICE client which supports the SASL protocol extension.
    #
    # It is necessary to configure /etc/sasl2/qemu.conf to choose
    # the desired SASL plugin (eg, GSSPI for Kerberos)
    #
    # sasl = 1

    # The default SASL configuration file is located in /etc/sasl2/
    # When running libvirtd unprivileged, it may be desirable to
    # override the configs in this location. Set this parameter to
    # point to the directory, and create a qemu.conf in that location
    #
    # sasl_dir = "/some/directory/sasl2"
  cgroup:
    controllers: []
      # - cpu
      # - devices
      # - memory
      # - blkio
      # - cpuset
      # - cpuacct
    device_acl: []
      # - "/dev/null"
      # - "/dev/full"
      # - "/dev/zero"
      # - "/dev/random"
      # - "/dev/urandom"
      # - "/dev/ptmx"
      # - "/dev/kvm"

  security:
    # The default security driver is SELinux. If SELinux is disabled
    # on the host, then the security driver will automatically disable
    # itself. If you wish to disable QEMU SELinux security driver while
    # leaving SELinux enabled for the host in general, then set this
    # to 'none' instead. It's also possible to use more than one security
    # driver at the same time, for this use a list of names separated by
    # comma and delimited by square brackets. For example:
    #       security_driver = [ "selinux", "apparmor" ]
    #
    # Notes: The DAC security driver is always enabled; as a result, the
    # value of security_driver cannot contain "dac".  The value "none" is
    # a special value; security_driver can be set to that value in
    # isolation, but it cannot appear in a list of drivers.
    #
    #security_driver = "selinux"
    drivers: []
    #  - "apparmor"
    default_confined: false
    require_confined: false

...
